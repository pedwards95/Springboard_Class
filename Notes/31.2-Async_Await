You can declare any function in JavaScript as async
async functions always return promises!
Inside of an async function, you can write code that looks synchronous, even if it isnâ€™t
Our First async Example
  async function asyncFriendlyFn() {
    return "hello!!! omg so nice to meet you!"
  }

  asyncFriendlyFn();
  // Promise {<resolved>: "hello!!! omg so nice to meet you!"}

  asyncFriendlyFn().then(msg => console.log(msg));
  // "hello!!! omg so nice to meet you!"

  function friendlyFnPromise() {
    return Promise.resolve("hello!!! omg so nice to meet you!")
  }

  friendlyFnPromise();
  // Promise {<resolved>: "hello!!! omg so nice to meet you!"}

  friendlyFnPromise().then(msg => console.log(msg));
  // "hello!!! omg so nice to meet you!"

What about Rejection?
  Inside of async functions, the return value is wrapped in a resolved promise.
  If you want to reject instead of resolve, simply throw an error inside of the async function!

Rejection Example
  async function oops() {
    throw "you shouldn't have invoked me!!"
  }

  oops();
  // Promise {<rejected>: "you shouldn't have invoked me!!"}

  oops().catch(err => console.log(err));
  // "you shouldn't have invoked me!!"

The await keyword
  Inside of an async function, we can use the await keyword
  await pauses the execution of the async function
  Can await any async operation returning a promise (eg other async functions!)
  The await keyword waits for promise to resolve & extracts its resolved value

    async function getStarWarsData() {
      console.log("starting!");
      let movieData = await $.getJSON(
          "https://swapi.dev/api/films/");
      // these lines do NOT run until the promise is resolved!
      console.log("all done!");
      console.log(movieData);
    }

    getStarWarsData();

  No .then or callback necessary!

Using async / await
    We can also place async functions as methods inside objects!
    Make sure to prefix the name of the function with the async keyword

        let starWars = {
          genre: "sci-fi",
          async logMovieData() {
            let url = "https://swapi.dev/api/films/";
            let movieData = await $.getJSON(url);
            console.log(movieData.results);
          }
        };

        starWars.logMovieData();

Class async
    We can also make async instance methods with ES2015 class syntax
        class Pokemon {
          constructor(id) {
            this.id = id;
          }

          async logName() {
            let url = `https://pokeapi.co/api/v2/pokemon/${this.id}/`;
            let response = await $.getJSON(url);
            console.log(response.name);
          }
        }

        let pokemon = new Pokemon(10);

        pokemon.logName();
        // "caterpie"

Handling errors
    If a promise is rejected using await, an error with be thrown.
    We can use a try/catch statement to handle errors!

        async function getUser(user) {
          try {
            let url = `https://api.github.com/users/${user}`;
            let response = await $.getJSON(url);
            console.log(`${response.name}: ${response.bio}`);
          } catch (e) {
            console.log("User does not exist!");
          }
        }

        getUser("mmmaaatttttt");
        // Matt Lane: Co-founder at @rithmschool.
        // Teacher of how the internet works.
        // Check us out at rithmschool.com

        getUser("nopenouserhereomggoaway");
        // User does not exist!


Parallel Requests using async / await
    async function catchSomeOfEmParallel() {
      let baseURL = "https://pokeapi.co/api/v2/pokemon";
      let p1Promise = $.getJSON(`${baseURL}/1/`);
      let p2Promise = $.getJSON(`${baseURL}/2/`);
      let p3Promise = $.getJSON(`${baseURL}/3/`);

      let p1 = await p1Promise;
      let p2 = await p2Promise;
      let p3 = await p3Promise;

      console.log(`The first pokemon is ${p1.name}`);
      console.log(`The second pokemon is ${p2.name}`);
      console.log(`The third pokemon is ${p3.name}`);
    }

    catchSomeOfEmParallel();
    Start the requests in parallel rather than in sequence!

Another option with Promise.all

    async function catchSomeOfEmParallel2() {
      let baseURL = "https://pokeapi.co/api/v2/pokemon";
      let pokemon = await Promise.all([
        $.getJSON(`${baseURL}/1/`),
        $.getJSON(`${baseURL}/2/`),
        $.getJSON(`${baseURL}/3/`)
      ]);

      console.log(`The first pokemon is ${pokemon[0].name}`);
      console.log(`The second pokemon is ${pokemon[1].name}`);
      console.log(`The third pokemon is ${pokemon[2].name}`);
    }

    catchSomeOfEmParallel2();

We can use Promise.all to await multiple resolved promises
Here we are simply waiting for an array of promises to resolve!