SQL DML
    Data Manipulation Language
    DML is a subset of SQL that involves querying and manipulating records in existing tables.

    Most of the DML you’ll be doing will be related to CRUD operations on rows.

CRUD
    C	Create	INSERT INTO
    R	Read	SELECT … FROM
    U	Update	UPDATE … SET
    D	Delete	DELETE FROM

SELECT
    SELECT is the most flexible and powerful command in SQL

    It selects rows (included summary data, roll-up data, etc) from table(s)

    SELECT statements have subclauses, which are performed in this order:
        #	Clause	Purpose	Required?
        1	FROM	Select and join together tables where data is	No
        2	WHERE	Decide which rows to use	No
        3	GROUP BY	Place rows into groups	No
        4	SELECT	Determine values of result	Yes
        5	HAVING	Determine which grouped results to keep	No
        6	ORDER BY	Sort output data	No
        7	LIMIT	Limit output to n rows	No
        8	OFFSET	Skip n rows at start of output	No

FROM
    Determine which table(s) to use to get data:
        SELECT *
          FROM books;
    You can get data from more than one table by “joining” them — we’ll discuss this later

WHERE
    Filter which rows get included:
        SELECT *
          FROM books
          WHERE price > 10;

GROUP BY
    Reduce the amount of rows returned by grouping rows together:
        SELECT author, COUNT(*)
          FROM books
          GROUP BY author;

SELECT
    Only at this point do the SELECT values get calculated:
        SELECT author, COUNT(*)
          FROM books
          GROUP BY author;

HAVING
    Decide which group(s), if grouped, to keep:
        SELECT author, COUNT(*)
          FROM books
          GROUP BY author
          HAVING COUNT(*) > 2;

ORDER BY
    Arrange output in order (sort):
        SELECT title, author, price
          FROM books
          ORDER BY author;

LIMIT
    Only show n number of rows:
        SELECT title, author, price
          FROM books
          ORDER BY price
          LIMIT 5;

OFFSET
    Skip n number of rows. Used in combination with LIMIT to paginate results.
        SELECT title, author, price
          FROM books
          ORDER BY price
          OFFSET 1;

Some Example SELECTs
    SELECT * FROM books;

    SELECT title, author FROM books;

    SELECT title, author FROM books LIMIT 10;

    SELECT * FROM books WHERE page_count < 150;

SQL Operators
    Operators are used to build more complicated queries They involve reserved SQL keywords
    These include IN, NOT IN, BETWEEN, AND, and OR

An example
    SELECT title FROM books WHERE author = 'J. K. Rowling';

    SELECT * FROM books WHERE id IN (1, 12, 30);

    SELECT title, author
      FROM books
      WHERE page_count BETWEEN 300 AND 500;

    SELECT title, author
      FROM books
      WHERE price < 10
        AND page_count < 150;

    SELECT title, author, publication_date, price
      FROM books
      WHERE publication_date > '01-01-2017'
        OR price > 100;

    SELECT title, price
      FROM books
      ORDER BY price;

SQL Aggregates
    Aggregates are used to combine multiple rows together to extract data

    Common aggregate functions include COUNT, AVG, SUM, MIN, and MAX

An Example
    SELECT COUNT(*) FROM books;

    SELECT COUNT(*) FROM books WHERE author = 'Kyle Simpson';

    SELECT MAX(page_count) FROM books;

    SELECT MIN(price) FROM books;

    SELECT SUM(page_count) FROM books;

    SELECT AVG(price) FROM books;

GROUP BY
    The GROUP BY and HAVING clauses are often used with aggregate functions
        SELECT author, COUNT(*)
          FROM books
          GROUP BY author;

        SELECT author, COUNT(*)
          FROM books
          GROUP BY author
          HAVING COUNT(*) > 1;

        SELECT author, SUM(page_count) AS total
          FROM books
          GROUP BY author
          ORDER BY total DESC;

Modifying Data
    Creating data with INSERT

        INSERT INTO books (title, author)
          VALUES ('The Iliad', 'Homer');

        INSERT INTO books (title) VALUES
          ('War and Peace'),
          ('Emma'),
          ('Treasure Island');

INSERT via SELECT
    You can combine INSERT and SELECT to copy data from another table.
        INSERT INTO books (title, author)
          SELECT title, author
            FROM some_other_table
            WHERE price < 10;

Updating data with UPDATE

    UPDATE books SET author = 'Matt';

    UPDATE books SET author = 'Jane Austen' WHERE title = 'Emma';

Deleting data with DELETE
    DELETE FROM books WHERE title = 'Emma';

    DELETE FROM books WHERE num_pages > 200;

    DELETE FROM books;