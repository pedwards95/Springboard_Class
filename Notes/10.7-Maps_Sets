Maps and Sets
    Data structures in JavaScript

Maps
    Also called “hash maps” in other languages
    Similar to objects, except the keys can be ANY data type!
    Created using the new keyword
        let firstMap = new Map();
    Example
        firstMap.set(1, 'Ash');
        firstMap.set(false, 'a boolean');
        firstMap.set('nice', 'a string');
        firstMap.delete('nice'); // true
        firstMap.size; // 2

        let arrayKey = [];
        firstMap.set(arrayKey, [1,2,3,4,5]);

        let objectKey = {};
        firstMap.set(objectKey, {a:1});

    .keys() to iterate over all the keys
    .values() to iterate over all the values
    .entries() to iterate over all the [key,value] pairs

Sets
    All values in a set are unique
    Any type of value can exist in a set
    Created using the new keyword
    Exist in quite a few other languages, ES2015 finally brings them to JavaScript

Creating Sets
    To make a new Set, we call new Set()
    When making a new Set, you can also pass in an iterable object.
    example
        const hashTags = new Set(["#selfie", "#nofilter"])
Adding to Sets
    const annoyingHashTags = new Set();
    annoyingHashTags.add("#YOLO");
    annoyingHashTags.add("#Blessed")
    annoyingHashTags.add("#YOLO"); // will not be added!
size
    Use the size property to determine the number of values stored in a Set:
Checking for an element in a set
    Sets do not support random access,
    but we are able to check if a set contains a given value using has()
Removing values in a set
    To remove a single value from a set, use delete()
    Example
        const annoyingHashTags = new Set();
        annoyingHashTags.add("#YOLO");
        annoyingHashTags.add("#Blessed");

        annoyingHashTags.has("#YOLO"); //true
        annoyingHashTags.delete("#YOLO");
        annoyingHashTags.has("#YOLO"); //false
We can also use clear() to empty a set of all values:
    annoyingHashTags.clear();
Iterating over a set
    Sets are iterable objects, so we can use them with for…of loops or the spread operator.
    Values in a set are ordered by insertion order.
        for(let val of annoyingHashTags) {
           console.log("Please don't use", val);
        }