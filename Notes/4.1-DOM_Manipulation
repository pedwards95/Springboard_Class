What Is The Dom?
    Document Object Model
    It is the programming interface for HTML
    A representation of our HTML that can be accessed using JavaScript
How does it get created?
    When a web page is loaded, the browser creates the DOM for that specific page
    This allows for the creation of dynamic web pages where users can interact with the page
What does it look like?
    The structure of the DOM uses something called a tree, where the topmost node is the document object.

Using the document object
    the document object represents the web page that has been loaded
    it acts as the “starting point” for access to the DOM.
The things we can do with the document object
    Finding elements
    Making new elements
    Updating elements
    Changing properties on elements
    Listening for events like clicks

This object has properties and functions that we use to access our HTML elements which we can manipulate with JavaScript.

Different Methods
JavaScript has quite a few different methods for selecting elements in the DOM

We’re going to be starting with one method called getElementById.

getElementById
    getElementById accepts a string which is the name of an id in the DOM.
    It finds the first matching id

document.getElementById("main");
    We get back a special object called an HTMLElement.
    The exact kind of object we get back will depend on what we select (HTMLDivElement vs HTMLParagraphElement)
    This special object contains quite a few helpful methods that we will see later!

getElementsByTagName
    getElementsByTagName accepts a string which is the name of an element in the DOM.
    It returns a list of all of the elements that match the string passed to the function
    document.getElementsByTagName("li");
        This function returns an HTMLCollection to us!
        It looks a lot like an array, and you can access it at a specific index or use a for loop
        However, you can not use common methods like push, pop, indexOf or includes

getElementsByClassName
    getElementsByClassName accepts a string which is the name of an element in the DOM.
    Just like getElementsByTagName, we get back a special kind of array called an HTMLCollection.

querySelector
    querySelector accepts a string which is a valid CSS selector
    It returns the first element that matches the CSS selector passed to the function.
        document.querySelector("#main");
        document.querySelector("h2.section-heading");
    Just like getElementById, this function returns a special HTMLElement object to us.

querySelectorAll
    querySelectorAll accepts a string which is a valid CSS selector
    It returns all the elements that matches the CSS selector passed to the function.=
        document.querySelectorAll("li");
        document.querySelectorAll("ul.nav-links");
    This function returns a NodeList to us!