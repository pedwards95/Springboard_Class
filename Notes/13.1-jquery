jQuery
  It’s a library for:
  Manipulating the DOM
  Adding Event Listeners
  Animating Elements
  Making HTTP Requests (AJAX)
Including jQuery
  https://code.jquery.com/
  Once you include jQuery script, you have access to global $
  $ in the browser console
  If you see something like ƒ $(selector, [startNode]) { [Command Line API] } as the value for $, this means that jQuery is not installed.
  On the other hand, if you see something like ƒ (e,t){return new he.fn.init(e,t)}, this means that a (minified) version of jQuery has been installed.

Selecting elements
  $("ul")
    // like document.querySelectorAll,
    // this will select ALL uls
  $("#todo-container")
  $(".carousel-image")

  $listItems.get();
  // an array of HTMLLIElements

  $listItems.get(0);
  // the first HTMLLIElement

Storing jQuery Objects in variables
  It’s a common convention to store jQuery objects in variable names that begin with $.

  let $class2Elements = $(".class2");

jQuery Methods
  Common jQuery Methods
  .val()
  .text()
  .attr()
  .html()
  .css()
  .addClass() / .removeClass() / .toggleClass()
  .empty() / .remove()
  .append() / .prepend()
  .find() / .closest() / .parent() / .next() / .prev()
  jQuery getter / setter pattern

  Vanilla JS: .getAttribute(attrName) and .setAttribute(attrName, newValue)
  jQuery: .attr(attrName, newValue) (second param is optional)

Chaining with jQuery
  Almost all jQuery methods return a jQuery object, which allows for method chaining.


Creating elements
  $("<li>") Create a new li
  $("li") Select existing `li`s
Waiting for the DOM to load
  $(function() {

  });

  $(document).ready(function() {

  });
Events and Delegation with jQuery
  jQuery’s on() works similarly to addEventListener. It lets you specify the type of event to listen for.

  //prints when item with id "submit" is clicked
  $("#submit").on("click", function() {
    console.log("Another click");
  });

Why Use on()?
  In most cases, click() and on(“click”) will both get the job done. HOWEVER, there is one key difference:
  on() accepts optional argument between type of event and callback
  This flexibility allows us to leverage event delegation.
Event Delegation
  Event delegation allows us to attach an event listener to a parent element, but only invoke the callback if the event target matches a certain selector.
  This will work even if elements matching the selector don’t exist yet!
  $("#meme-container").on("click", ".meme", function(evt) {
    deleteMeme(evt.target);
  });