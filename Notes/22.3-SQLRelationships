
One-to-Many (1:M)
    Our studio_id column provides us with a reference to the corresponding record in the studios table by its primary key.
    Typically this is implemented with a foreign key constraint, which makes sure every studio_id exists somewhere in the studios table.
    One-to-Many (1:M) in the sense that one studio has many movies, but each movie has one studio.
    In this example, we can say movies is the referencing table, and studios is the referenced table.

The Foreign Key Constraint
    Setting up a foreign key constraint with DDL:
        CREATE TABLE studios
          (id SERIAL PRIMARY KEY,
           name TEXT,
           founded_in TEXT);

        CREATE TABLE movies
          (id SERIAL PRIMARY KEY,
           title TEXT,
           studio_id INTEGER REFERENCES studios (id));
    Constraints are specified by the DDL, but affect DML query behavior.

Deleting Data Examples
    When trying to delete a studio…
    We cannot delete it outright while movies still reference it.

    Option 1: Clear out the studio_id columns of movies that reference it.
    Option 2: Delete the movies associated with that studio first.

Joining Tables
    JOIN Operation
        The JOIN operation allows us to create a table in memory by combining information from different tables
        Data from tables is matched according to a join condition
        Most commonly, the join condition involves comparing a foreign key from one table and a primary key in another table
            SELECT title, name
              FROM movies
              JOIN studios
                ON movies.studio_id = studios.id;
            SELECT title, name
              FROM movies
              INNER JOIN studios
                ON movies.studio_id = studios.id;
        JOIN and INNER JOIN are the same, the INNER keyword is optional.

Types of Joins
    Inner
       Only the rows that match the condition in both tables.
    Outer
        Left
            All of the rows from the first table (left), combined with matching rows from the second table (right).
        Right
            The matching rows from the first table (left), combined with all the rows from the second table (right)
        Full
            All the rows from both tables (left and right).

Joins in Practice
    Practically speaking, you’ll mostly be using Inner Joins
    Outer joins can be helpful when trying to find rows in one table with no match in another table (e.g. an independent movie with no studio)

Many-to-Many
    A many-to-many is just two one-to-manys back-to-back!
    Setting Up Actors and Roles
        CREATE TABLE actors
          (id SERIAL PRIMARY KEY,
           first_name TEXT,
           last_name TEXT,
           birth_date TEXT);

        CREATE TABLE roles
          (id SERIAL PRIMARY KEY,
           movie_id INTEGER REFERENCES movies (id),
           actor_id INTEGER REFERENCES actors (id));
        INSERT INTO actors
          (first_name, last_name, birth_date)
        VALUES
          ('Scarlett', 'Johansson', '1984-11-22'),
          ('Samuel L', 'Jackson', '1948-12-21'),
          ('Kristen', 'Wiig', '1973-08-22');
        INSERT INTO roles
          (movie_id, actor_id)
        VALUES
          (1, 1),
          (1, 2),
          (3, 2);

Join Tables
    The roles table in our current schema is an example of a join table (aka an associative table aka a mapping table).
    A join table serves as a way to connect two tables in a many-to-many relationship.
    The join table consists of, at a minimum, two foreign key columns to the two other tables in the relationship.
    It is completely valid to put other data in the join table (e.g. how much was an actor paid for the role).
    Sometimes the join table has a nice name (when it has meaning on its own, e.g. roles), but you can also just call it table1_table2.
