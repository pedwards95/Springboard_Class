WTForms
	WTForms is a Python library providing:
		Validation
		HTML production
		Security

Flask-WTF
	Flask-WTF is built on top of that, and adds integration with Flask (get data from request, etc)

Install
	(env) $ pip install flask-wtf

Basic Example
	(SEE DEMO FOLDER!!!!)

Models vs Forms
	SQLAlchemy provides model: class for logical object
	WTForm provides form class
	A single model may have different forms
	Not all fields on add form might appear on edit form
	Different validation might apply on add/edit
	Different kinds of users (public v admin) have different fields
	You’ll often take the result of a form and create/edit an SQLAlchemy object.

Field Types
	BooleanField
		Normally appears as a checkbox
	DateField / DateTimeField
		Date or Date & Time
	IntegerField / FloatField
		Numeric types
	StringField / TextAreaField
		Single line of text / larger text area
		Selection From Choices
	RadioField
		Series of radio buttons from choices
	SelectField
		Drop-down menu from choices
	SelectMultipleField
		Multi-select box from choices

Example:
	weather = SelectField('Weather', choices=[('rain', 'Rain'), ('nice', 'Nice Weather')])

To convert result to integer:
	priority = SelectField('Priority Code',
	  choices=[(1, 'High'), (2, 'Low')],
	  coerce=int
	)

Can set dynamic choices:
	forms.py
	class AddFriendForm(FlaskForm):
	    """Form to pick a friend."""

	    friend = SelectField("Friend", coerce=int)
	app.py
	@app.route("/get-friend")
	def handle_friend_form():
	    """Handle the add-friend form."""

	    form = AddFriendForm()

	    # get current list of users
	    users = [(u.id, u.name) for u in User.query.all()]

	    # dynamically set friend choices
	    form.friend.choices = users

Validation
	WTForm provides “validators”:
	(SEE DEMO OR DOCS!!!)

Update Forms
	(SEE DEMO!!)
	Passing obj=data-obj provides form with defaults from object

CSRF Security
	Cross-Site Request Forgery
	A form on any site can submit to any other site!
		<form action="http://yourbank.com/transfer" method="POST">
		<input type="hidden" name="from" value="your-acct">
		<input type="hidden" name="to" value="my-acct">
		<input type="hidden" name="amt" value="$1,000,000">
		<button type=submit">I Love Kittens!</button>
		</form>
	Therefore, most sites use a “CSRF Token”:
		This is generated by the server when a form is shown
		It is included in the HTML of the form
		It is checked by the server on form submission

Flask-WTF uses CSRF out-of-the-box:
	All forms include a hidden CSRF field
	The validate_on_submit method checks for this

Testing
	For tests to work, need to disable CSRF checking in tests:
		app.config['WTF_CSRF_ENABLED'] = False
	(SEE DEMO!!!)

Best Practices
	Make distinct add/edit forms, if sensible
	Add lots of form validation, if appropriate
	All non-GET routes return redirect (not render_template) on success