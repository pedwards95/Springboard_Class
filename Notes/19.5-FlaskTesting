Unit Test
    does this individual component work?
Integration Tests
    do the parts work together?
End-to-end Test
    wet clothes → dry clothes?

Some people call and include other notions of testing levels, like “acceptance tests”, “system tests”, and others.

Unit Tests
    Test one “unit” of functionality
    Typically, one function or method
    Don’t test integration of components
    Don’t test framework itself (eg, Flask)
    Promote modular code
    Write code with testing in mind

    (SEE DEMO CODE!!)

Running DocTests
  $ python -m doctest arithmetic.py

DocTest options
    You can also add special comments in your doctests to say “be a little less strict about how the output matches”.
        >>> range(16)
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        By using the ELLIPSIS option, you can elide part of that in your test, like this:

        >>> print range(16)
        [0, 1, ..., 14, 15]
    Or, if your output may have awkward linebreaks and whitespace that might make it hard to use in a test, you can use NORMALIZE_WHITESPACE to ignore all whitespace differences
      between the expected output and the real output:
        >>> poem_line
        'My father moved through
        dooms of love'

Python unittest module
    Unit testing via classes! In the Python standard library.
        from unittest import TestCase
        class AdditionTestCase(TestCase):
            """Examples of unit tests."""

            def test_adder(self):
                assert arithmetic.adder(2, 3) == 5

    Test cases are a bundle of tests
    In a class that subclasses TestCase
    Test methods must start with test_
        python -m unittest NAME_OF_FILE runs all cases

TestCase assertions
    Provides better output, including expected value
        def test_adder(self):
            assert arithmetic.adder(2, 3) == 5
        def test_adder_2(self):
            # instead of assert arithmetic.adder(2, 2) == 4
            self.assertEqual(arithmetic.adder(2, 2), 4)

    Method	Checks that
        assertEqual(a, b)	a == b
        assertNotEqual(a, b)	a != b
        assertTrue(x)	bool(x) is True
        assertFalse(x)	bool(x) is False
        assertIs(a, b)	a is b
        assertIsNot(a, b)	a is not b
        assertIsNone(x)	x is None
        assertIsNotNone(x)	x is not None
        assertIn(a, b)	a in b
        assertNotIn(a, b)	a not in b
        assertIsInstance(a, b)	isinstance(a, b)
        assertNotIsInstance(a, b)  	not isinstance(a, b)

    DocTest or unittest Class?
        DocTests keep tests close to code
            Too many tests can drown out code
        unittest classes good for when you have lots of tests
            Or interesting hierarchies of tests

Integration Tests
    Test that components work together

Integration Testing Flask App
    “Does this URL path map to a route function?”
    “Does this route return the right HTML?”
    “Does this route return the correct status code?”
    “After a POST to this route, are we redirected?”
    “After this route, does the session contain expected info?”

Writing Integration Tests
    You write them with unittest framework.
        class ColorViewsTestCase(TestCase):
            """Examples of integration tests: testing Flask app."""

            def test_color_form(self):
                with app.test_client() as client:
                    # can now make requests to flask via `client`
    Technically, this comes from “Werkzeug”, a library that Flask uses.
    This doesn’t start a real web server — but we can make requests to Flask via client.

    (SEE DEMO CODE!!)

setUp and tearDown
    setUp and tearDown methods are called before/after each test.
        def setUp(self):
            """Stuff to do before every test."""
        def tearDown(self):
            """Stuff to do after each test."""
        def test_1(self):
            ...
        def test_2(self):
            ...


Making Testing Easier
    Add these before test case classes:
        demo/test_app.py
        # Make Flask errors be real errors, not HTML pages with error info
        app.config['TESTING'] = True

        # This is a bit of hack, but don't use Flask DebugToolbar
        app.config['DEBUG_TB_HOSTS'] = ['dont-show-debug-toolbar']

    When you run your tests, it will fail, as that route returns a 500 (Internal Server Error), not a 200 (Ok).
        However, you won’t see the error message of the server.
        To fix this, you can set the Flask app’s configuration to be a in TESTING mode, and it will print all Flask errors to the console.