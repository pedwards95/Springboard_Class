Packing / Unpacking
Unpacking
    point = [10, 20]
    x, y = point
    a = 2
    b = 3
    b, a = (a, b)
Can gather rest using * before variable:
    letters = ["a", "b", "c"]
    first, *rest = letters
Can “spread” iterables:
    fruits = {"apple", "berry", "cherry"}
    foods = ["kale", "celery", *fruits]
Error Handling
    In general, Python raises errors in places JS returns undefined:
    try:
        age = int(data_we_received)
        print("You are", age)
    except:
        print("Hey, you, that's not an age!")

    try:
        age = int(data_we_received)
        print("You are", Age)
    except ValueError:
        print("Hey, you, that's not an age!")

Common Exception Types
    AttributeError	Couldn’t find attr: o.missing
    KeyError	Couldn’t find key: d["missing"]
    IndexError	Couldn’t find index: lst[99]
    NameError	Couldn’t find variable: not_spelled_right
    OSError	Operating system error: can’t read/write file, etc
    ValueError	Incorrect value (tried to convert “hello” to int, etc)
Raising Errors
    In Python, it’s common for you to “raise” errors to signal problems:
    if color not in {"red", "green", "blue"}:
        raise ValueError("Not a valid color!")

Docstrings & Doctests
    Docstrings are the strings at top of function or file that document it:
    Example:
        def bounded_avg(nums):
            "Return avg of nums (makes sure nums are 1-100)"

            for n in nums:
                if n < 1 or n > 100:
                    raise ValueError("Outside bounds of 1-100")

            return sum(nums) / len(nums)
    It’s incredibly good style for every function to have one!

Doctests
    Doctests are snippets of interactive demonstration in a docstring:
    Example:
        def bounded_avg(nums):
            """Return avg of nums (makes sure nums are 1-100)

               >>> bounded_avg([1, 2, 3])
               2

               >>> bounded_avg([1, 2, 101])
               Traceback (most recent call last):
                   ...
               ValueError: Outside bounds of 1-100
            """

            for n in nums:
                if n < 1 or n > 100:
                    raise ValueError("Outside bounds of 1-100")

            return sum(nums) / len(nums)
    Can run this test:
        $ python3 -m doctest -v your-file.py

Importing
    Python includes a “standard library” of dozens of useful modules.
    These are not in the namespace of your script automatically.
    Example:
        from random import choice
        print("Let's play", choice(games))


        from random import choice, randint
        from random import choice as pick_a_thing
        pick_a_thing(games)

        import random

Using Pip
    To install a new package:
        $ pip3 install forex_python     

        $ ipython
            In [1]: from forex_python.converter import convert
            In [2]: convert("USD", "GBP", 10)

Virtual Environments
    Normally, pip makes the installed library available everywhere
        This is convenient, but a little messy
    Creating a Virtual Environment
        $ cd my-project-directory
        $ python3 -m venv venv
        (“using venv module, make a folder, venv, with all the needed stuff”)

    Using Your Virtual Environment
        $ source venv/bin/activate  #I had to use venv/scripts/activate
    You only need to create the virtual environment once
    You need to use source every time you open a new terminal window though

Installing into Virtual Environment
    Make sure you’re using your venv
    Use pip install, as usual

Tracking Required Libraries
    To see a list of installed libraries in a venv:
        $ pip3 freeze
    It’s helpful to save this info in a file (typically named “requirements.txt”):
        $ pip3 freeze > requirements.txt

Using Virtual Environments
    add venv/ to your project’s .gitignore

Recreating a Virtual Environment
    $ git clone http://path-to-project
    $ cd that-project
    $ python3 -m venv venv
    $ source venv/bin/activate
    (venv) $ pip3 install -r requirements.txt

Leaving Virtual Environments
    (venv) $ deactivate

Files
    filepath: absolute or relative path to file
    mode: string of how to open file (eg, “r” for reading or “w” for writing)
    This returns an file-type instance.
    Example:
        file = open("/my/file.txt")

        for line in file:
            print("line =", line)
        file.close()

    All at once:
        file = open("/my/file.txt")
        text = file.read()
        file.close()
    Writing
        file = open("/my/file.txt", "w")
        file.write("This is a new line.")
        file.write("So is this.")
        file.close()

"With" Blocks
    with open("/my/file.txt", "r") as file:
        for line in file:
            print("line=", line)

        # our file is still open here
    # but it will be automagically closed here

    Python will keep that file open as long as you’re inside the with block. 
    At the point the your code is no longer indented inside that block, it will automatically close the file you’ve used.
    These with-blocks are used for other kinds of resources besides files;
         to learn more about them, you can search for “python context mananagers”.