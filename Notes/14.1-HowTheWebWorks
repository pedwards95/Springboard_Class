Networks
  A network is a set of computers that can intercommunicate.
  The internet is just a really, really big network.
  The internet is made up of smaller, “local” networks.

Hostnames
  We often talk to servers by “hostname” — site.com or computer-a.site.com.
  That’s just a nickname for the server, though — and the same server can have many hostnames.

IP Addresses
  On networks, computers have an “IP Address” — a unique address to find that computer on the network.
  IP addresses look like 123.77.32.121, four numbers (0-255) connected by dots.
  There are a lot of advanced edges here that make this more complicated, but most of these details aren’t important for software engineers:
  there another whole way to specify networks, “IPv6”, that use a different numbering scheme.
  some computers can have multiple IP addresses they can be reached by
  under some circumstances, multiple computers can share an IP address and have this be handled by a special kind of router.
    If you’re interested in system administration details, you can learn about this by reading about “Network Address Translation”.

127.0.0.1
  127.0.0.1 is special — it’s “this computer that you’re on”.
  localhost

URLs
  http://site.com/some/page.html?x=1

turns into:
  Protocol
    http
  Hostname
    site.com
  Port
    80
  Resource
    /some/page.html
  Query
    ?x=1

Protocols
  “Protocols” are the conventions and ways of one thing talking to another.
  Examples:
    http
      Hypertext Transfer Protocol (standard web) (How browsers and servers communicate)
    https
      HTTP Secure (How browsers and servers communicate with encryption)
    ftp
      File transfer protocol (An older protocol for sending files over internet)
  There are many others, but these are the common ones.

Hostname
  DNS (domain name service) turns this into an IP address
  So site.com might resolve to 123.45.67.89

Port
  Every server has 65,535 unique “ports” you can talk to
  Services tend to have a default port
    For HTTP, is port 80
    For HTTPS, is port 443
  You don’t have to specify in URL unless you want a different port
    To do that: http://site.com:12345/some/page.html

Resource
  This always talks to some “web server” program on the server
  For some servers, may just have them read an actual file on disk: /some/page.html
  For many servers, “dynamically generates” a page

Query String
  This provides “extra information” — search terms, info from forms, etc
  The server is provided this info; might use to change page
  Sometimes, JavaScript will use this information in addition/instead
  Multiple arguments are separated by &: ?x=1&y=2
  Argument can be given several times: ?x=1&x=2

Unix (and OSX and Linux) systems ship with a utility, dig, which will translate a hostname into an IP address for you, and provide debugging information about the process
by which it answered this.

$ dig site.com

Request and Response
  When you point your browser to a webpage on a server, your browser makes a request to that server.
  This is almost always a GET request and it contains the exact URL you want.
    The server then responds with the exact HTML text for that page:
  It’s often the case, though, that the web server itself will have to do some work to get the page you want, often interacting with other things, such as database servers.

What’s in a Request?
  Method (ex: GET)
  HTTP protocol version (almost always 1.1)
  Resource URL you want
  Headers
    Hostname you’re asking about
    Date your browser thinks it is
    Language your browser wants information in
    Any cookies that server has sent
    And more!

What’s in a Response?
  HTTP protocol version (almost always 1.1)
  Response Status Code (200, 404, etc)
  Headers
    Content Type (typically text/html for web pages)
    Date/time the server thinks it is
    Any cookies server wants to set
    Any caching information
    And more!

Requesting 1 webpage often involves many separate requests!
  Browsers issue these requests asynchronously
  They’ll assemble the final result as requests come back
  You can view this in the browser console → Network

Trying on Command Line
  Curl (OSX)
    OSX systems come with a utility, curl, which will make an HTTP request on the command line.

    curl -v site.com

Methods: GET and POST
  GET: requests without side effects (ie, don’t change server data)
    Typically, arguments are passed along in query string
    If you know the arguments, you can change the URL
    Entering-URL-in-browser, clicking links, and some form submissions
  POST: requests with side effects (ie, change data on server)
    Typically, arguments sent as body of the request (not in query string)
    Some form submissions (but never entering-URL-in-browser or links)
    Always do this if there’s a side-effect: sending mail, charge credit card, etc
    “Are you sure you want to resubmit?”