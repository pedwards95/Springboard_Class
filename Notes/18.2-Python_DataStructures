Python Data Structures
    len(x) returns length of x:
        # chars in string
        # items in list
        # items in dictionary
        # items in a set
Lists
    Like JS arrays:
        Mutable, ordered sequence
        O(n) to search, add, delete
            Except when at end: O(1)
Making Lists
    alpha = ['a', 'b', 'c']
    Can use constructor function, list()

    letters = list("apple")   # ['a', 'p', 'p', 'l', 'e']

Membership
    Can check for membership with in:
        if "taco" in foods:
            print("Yum!")

        if "cheese" not in foods:
            print("Oh no!")

Slicing
    Can retrieve list from list:
        lst[start:stop:step]

        alpha = ['a', 'b', 'c', 'd', 'e']
        alpha[3:0:-1]    # ['d', 'c', 'b']

Splicing
    Can assign a list to a splice:

    alpha = ['a', 'b', 'c', 'd', 'e']
    alpha[2:] = ['y', 'z']
    print(alpha)            # ['a', 'b', 'y', 'z']
    alpha[1:3] = []
    print(alpha)            # ['a', 'z']

Core API
    l.append(x)	Add x to end of of list
    l.copy()	Return shallow copy of list l
    l.count(x)	Return # times x appears in l
    l.extend(l2)	Add items of l2 to l
    l.index(x)	Return (0-based) index of x in l
    l.insert(i, x)	Insert x at position i
    l.pop(i)	Remove & return item at i (default last)
    l.reverse()	Reverse list (change in place)
    l.sort()	Sort list in place

STRING Core API
    s.count(t)	Returns # times t occurs in s
    s.endswith(t)	Does s end with string t?
    s.find(t)	Index of first occurence of t in s (-1 for failure)
    s.isdigit()	Is s entirely made up of digits?
    s.join(seq)	Make new string of seq joined by s ("|".join(nums))
    s.lower()	Return lowercased copy of s
    s.replace(old,new,count)	Replace count (default: all) occurrences of t in s
    s.split(sep)	Return list of items made from splitting s on sep
    s.splitlines()	Split s at newlines
    s.startswith(t)	Does s start with t?
    s.strip()	Remove whitespace at start/end of s

Dictionaries
    Mutable, ordered mapping of keys → values

    O(1) runtime for adding, retrieving, deleting items
Making Dictionaries
    fruit_colors = {
        "apple": "red",
        "berry": "blue",
        "cherry": "red",
    }

    ages = {"Whiskey": 6, "Fluffy": 3, "Ezra": 7}

    for name in ages.keys():
        print(name)

    for age in ages.values():
        print(age)

    for (name, age) in ages.items():
        print(name, "is", age)

Dictionary Core API
    d.copy()	Return new copy of d
    d.get(x, default)	Retrieve value of x (return optional default if missing)
    d.items()	Return iterable of (key, value) pairs
    d.keys()	Return iterable of keys
    d.values()	Return iterable of values

Sets
    Unordered, unique collection of items, like JS Set

    O(1) runtime for adding, retrieving, deleting
Making Sets
    Use {}, but with only keys, not key: value

    colors = {"red", "blue", "green"}

    set(pet_list)   # {"Whiskey", "Fluffy", "Ezra"}

    set("apple")    # {"a", "p", "l", "e"}

Membership
    "red" in colors
Core API
    s.add(x)	Add item x to s
    s.copy()	Make new copy of s
    s.pop()	Remove & return arbitrary item from s
    s.remove(x)	Remove x from s
Set Operations
    moods = {"happy", "sad", "grumpy"}
    dwarfs = {"happy", "grumpy", "doc"}

    moods | dwarfs    # union: {"happy", "sad", "grumpy", "doc"}
    moods & dwarfs    # intersection: {"happy", "grumpy"}
    moods - dwarfs    # difference: {"sad"}
    dwarfs - moods    # difference: {"doc"}
    moods ^ dwarfs    # symmetric difference: {"sad", "doc"}

Tuples
    Immutable, ordered sequence

Making Tuples
    t1 = (1, 2, 3)

    t2 = ()           # empty tuple

    t3 = (1,)         # one-item tuple: note trailing comma

    ids = [1, 12, 44]
    t_of_ids = tuple(ids)

What Are These Good For?
    Slightly smaller, faster than lists
    Since they’re immutable, they can be used as dict keys or put into sets

Comprehensions
    Python has filter() and map(), like JS
    But comprehensions are even more flexible
Filtering Into List
    evens = [num for num in nums if num % 2 == 0]
Mapping Into List
    doubled = [num * 2 for num in nums]

Can make “dictionary comprehensions” and “set comprehensions”:
    evens_to_doubled = {n: n * 2 for n in nums if n % 2 == 0}
    a_words = {w for w in words if w.startswith("a")}